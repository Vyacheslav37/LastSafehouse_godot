extends Node2D

# ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
const MESSAGE_DURATION := 2.0

# –°—Å—ã–ª–∫–∏ –Ω–∞ UI-—ç–ª–µ–º–µ–Ω—Ç—ã
@onready var food_label = get_node_or_null("CanvasLayer/HBoxContainer/VBoxContainer/FoodLabel")
@onready var meds_label = get_node_or_null("CanvasLayer/HBoxContainer/VBoxContainer/MedsLabel")
@onready var ammo_label = get_node_or_null("CanvasLayer/HBoxContainer/VBoxContainer/AmmoLabel")
@onready var metal_label = get_node_or_null("CanvasLayer/HBoxContainer/VBoxContainer/MetalLabel")
@onready var fuel_label = get_node_or_null("CanvasLayer/HBoxContainer/VBoxContainer/FuelLabel")
@onready var water_label = get_node_or_null("CanvasLayer/HBoxContainer/VBoxContainer/WaterLabel")
@onready var base_hp_label = get_node_or_null("CanvasLayer/HBoxContainer/VBoxContainer/BaseHPLabel")
@onready var survivors_label = get_node_or_null("CanvasLayer/HBoxContainer/VBoxContainer/SurvivorsLabel")

# –ó–≤—É–∫–∏
@onready var hover_sound = preload("res://sounds/hover_click.ogg")
@onready var click_sound = preload("res://sounds/item_click.ogg")

var sfx_hover: AudioStreamPlayer
var sfx_click: AudioStreamPlayer

# –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
var _current_message: Label = null
var _message_timer: SceneTreeTimer = null

func _ready():
	# –°–æ–∑–¥–∞—ë–º –ø–ª–µ–µ—Ä—ã –¥–ª—è –∑–≤—É–∫–æ–≤
	sfx_hover = AudioStreamPlayer.new()
	add_child(sfx_hover)
	sfx_click = AudioStreamPlayer.new()
	add_child(sfx_click)

	# üîä Dummy-–ø–ª–µ–µ—Ä –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞—É–¥–∏–æ –≤ HTML5
	var dummy_player = AudioStreamPlayer.new()
	dummy_player.stream = preload("res://sounds/hover_click.ogg")
	dummy_player.name = "AudioDummy"
	add_child(dummy_player)

	# –ü–æ–¥–∫–ª—é—á–∞–µ–º hover-–ø–æ–¥—Å–≤–µ—Ç–∫—É –∫–æ –≤—Å–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –∑–æ–Ω–∞–º
	for area in get_tree().get_nodes_in_group("interactables"):
		if not area.is_connected("mouse_entered", Callable(self, "_on_area_hover")):
			area.connect("mouse_entered", Callable(self, "_on_area_hover").bind(area, true))
		if not area.is_connected("mouse_exited", Callable(self, "_on_area_hover")):
			area.connect("mouse_exited", Callable(self, "_on_area_hover").bind(area, false))
	
	print("–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∑–ª—ã...")
	update_labels()

func _process(_delta):
	update_labels()

func update_labels():
	if not Globals:
		push_warning("Globals autoload –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –î–æ–±–∞–≤—å Globals.gd –≤ Project ‚Üí Autoload –∫–∞–∫ 'Globals'.")
		return

	# –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ
	if food_label: food_label.text = "–ï–¥–∞: " + str(Globals.Food)
	if meds_label: meds_label.text = "–ú–µ–¥–∏—Ü–∏–Ω–∞: " + str(Globals.Meds)
	if ammo_label: ammo_label.text = "–ë–æ–µ–ø—Ä–∏–ø–∞—Å—ã: " + str(Globals.Ammo)
	if metal_label: metal_label.text = "–ú–µ—Ç–∞–ª–ª: " + str(Globals.Metal)
	if fuel_label: fuel_label.text = "–¢–æ–ø–ª–∏–≤–æ: " + str(Globals.Fuel)
	if water_label: water_label.text = "–í–æ–¥–∞: " + str(Globals.Water)
	if base_hp_label: base_hp_label.text = "–ü—Ä–æ—á–Ω–æ—Å—Ç—å –±–∞–∑—ã: " + str(Globals.BaseHP)
	if survivors_label: survivors_label.text = "–í—ã–∂–∏–≤—à–∏–µ: " + str(Globals.Survivors)

# Hover-–ø–æ–¥—Å–≤–µ—Ç–∫–∞
func _on_area_hover(area: Area2D, entered: bool):
	var sprite = area.get_parent()
	if sprite and sprite is Sprite2D:
		if entered:
			sprite.modulate = Color(1.3, 1.3, 1.3)
			if hover_sound:
				sfx_hover.stream = hover_sound
				sfx_hover.play()
				print("–ó–≤—É–∫ —Ö–æ–≤–µ—Ä–∞ –¥–ª—è ", area.name)
		else:
			sprite.modulate = Color(1, 1, 1)

# –í–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫ –∫–ª–∏–∫–∞
func _click_flash(sprite: Sprite2D):
	if not sprite: return
	sprite.scale = Vector2(1.05, 1.05)
	sprite.modulate = Color(1.4, 1.4, 1.4)
	if click_sound:
		sfx_click.stream = click_sound
		sfx_click.play()
		print("–ó–≤—É–∫ –∫–ª–∏–∫–∞ –¥–ª—è ", sprite.name)
	await get_tree().create_timer(0.1).timeout
	sprite.scale = Vector2(1, 1)
	sprite.modulate = Color(1, 1, 1)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤
func _on_Raid_area_input_event(_viewport, event, _shape_idx):
	if event is InputEventMouseButton and event.pressed:
		print("–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–π–¥–∞...")
		if Globals.Food < 5 or Globals.Fuel < 3:
			show_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ–¥—ã –∏–ª–∏ —Ç–æ–ø–ª–∏–≤–∞ –¥–ª—è –≤—ã–ª–∞–∑–∫–∏!")
			return
		Globals.add_food(-5)
		Globals.add_fuel(-3)
		get_tree().change_scene_to_file("res://Raid.tscn")
		print("–ü–µ—Ä–µ—Ö–æ–¥ –≤ Raid.tscn")

func _on_Medical_area_input_event(_viewport, event: InputEvent, _shape_idx):
	if event is InputEventMouseButton and event.pressed and event.button_index == MOUSE_BUTTON_LEFT:
		print("–ö–ª–∏–∫ –ø–æ MedicalArea")
		Globals.add_meds(1)
		_click_flash($Medical)

func _on_Fuel_area_input_event(_viewport, event: InputEvent, _shape_idx):
	if event is InputEventMouseButton and event.pressed and event.button_index == MOUSE_BUTTON_LEFT:
		print("–ö–ª–∏–∫ –ø–æ FuelArea")
		Globals.add_fuel(1)
		_click_flash($Fuel)

func _on_Metal_area_input_event(_viewport, event: InputEvent, _shape_idx):
	if event is InputEventMouseButton and event.pressed and event.button_index == MOUSE_BUTTON_LEFT:
		print("–ö–ª–∏–∫ –ø–æ MetalArea")
		Globals.add_metal(1)
		_click_flash($Metal)

func _on_Garden_area_input_event(_viewport, event: InputEvent, _shape_idx):
	if event is InputEventMouseButton and event.pressed and event.button_index == MOUSE_BUTTON_LEFT:
		print("–ö–ª–∏–∫ –ø–æ GardenArea")
		Globals.add_food(1)
		_click_flash($Garden)

func _on_Water_area_input_event(_viewport, event: InputEvent, _shape_idx):
	if event is InputEventMouseButton and event.pressed and event.button_index == MOUSE_BUTTON_LEFT:
		print("–ö–ª–∏–∫ –ø–æ WaterArea")
		Globals.add_water(1)
		_click_flash($Water)

func _on_Weapon_area_input_event(_viewport, event: InputEvent, _shape_idx):
	if event is InputEventMouseButton and event.pressed and event.button_index == MOUSE_BUTTON_LEFT:
		print("–ö–ª–∏–∫ –ø–æ WeaponArea")
		Globals.add_ammo(1)
		_click_flash($Weapon)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞ (–∫–∞–∫ –≤ Raid)
func show_message(text: String, duration: float = MESSAGE_DURATION):
	# –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
	if _message_timer:
		_message_timer.timeout.disconnect(_on_base_message_timeout)
		_message_timer = null

	# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if _current_message:
		_current_message.queue_free()
		_current_message = null

	# –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ
	var lbl = Label.new()
	lbl.text = text
	lbl.autowrap_mode = TextServer.AUTOWRAP_WORD_SMART
	lbl.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
	lbl.vertical_alignment = VERTICAL_ALIGNMENT_CENTER
	lbl.add_theme_font_size_override("font_size", 48)

	# –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
	lbl.anchor_left = 0.5
	lbl.anchor_top = 0.5
	lbl.anchor_right = 0.5
	lbl.anchor_bottom = 0.5
	lbl.offset_left = -400
	lbl.offset_right = 400
	lbl.offset_top = -100
	lbl.offset_bottom = 100

	lbl.modulate = Color(1, 1, 1)  # –±–µ–ª—ã–π, –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
	$CanvasLayer.add_child(lbl)
	_current_message = lbl

	# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
	_message_timer = get_tree().create_timer(duration)
	_message_timer.timeout.connect(_on_base_message_timeout)

func _on_base_message_timeout():
	if _current_message:
		_current_message.queue_free()
		_current_message = null
	_message_timer = null
